<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.AsyncEx.Dataflow</name>
    </assembly>
    <members>
        <member name="T:Nito.AsyncEx.DataflowProgress`1">
            <summary>
            A progress implementation that sends progress reports to a dataflow block (via <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)"/>). Optionally shuts down the dataflow block when the task completes.
            </summary>
            <typeparam name="T">The type of progress value.</typeparam>
        </member>
        <member name="F:Nito.AsyncEx.DataflowProgress`1.block">
            <summary>
            The dataflow block to pass progress reports to.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.DataflowProgress`1.#ctor(System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.DataflowProgress`1"/> class.
            </summary>
            <param name="block">The dataflow block to pass progress reports to. May not be <c>null</c>.</param>
        </member>
        <member name="M:Nito.AsyncEx.DataflowProgress`1.ObserveTaskForCompletion(System.Threading.Tasks.Task)">
            <summary>
            Watches the task, and shuts down the dataflow block (via <see cref="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)"/> or <see cref="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete"/>) when the task completes.
            </summary>
            <param name="task">The task to watch. May not be <c>null</c>.</param>
        </member>
        <member name="T:Nito.AsyncEx.FuncBlock`1">
            <summary>
            A dataflow block which uses a function to generate its items.
            </summary>
            <typeparam name="T">The type of items generated by the function.</typeparam>
            <remarks>
            <para>If the function returns, then this block is completed.</para>
            <para>If the function throws <see cref="T:System.OperationCanceledException"/>, then this block is completed.</para>
            <para>If the function throws another exception, then this block is faulted.</para>
            <para>If this block is cancelled (by cancelling the <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken"/> member of the <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions"/>), then this block is cancelled and then the function is cancelled by having its method argument throw <see cref="T:System.OperationCanceledException"/>.</para>
            <para>If this block is completed (by calling <see cref="M:Nito.AsyncEx.FuncBlock`1.Complete"/>), then this block is completed and then the function is cancelled by having its method argument throw <see cref="T:System.OperationCanceledException"/>.</para>
            <para>If this block is faulted (by calling <see cref="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)"/>), then this block is faulted and then the function is cancelled by having its method argument throw <see cref="T:System.OperationCanceledException"/>.</para>
            </remarks>
        </member>
        <member name="F:Nito.AsyncEx.FuncBlock`1.block">
            <summary>
            The internal buffer block, holding items that have been generated by the function but not yet passed on.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.FuncBlock`1.functionCancellationTokenSource">
            <summary>
            The CTS used to signal the function to stop.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.FuncBlock`1.options">
            <summary>
            The options used to construct this block.
            </summary>
        </member>
        <member name="F:Nito.AsyncEx.FuncBlock`1.function">
            <summary>
            The producer function.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>
            Initializes the block and CTS.
            </summary>
            <param name="dataflowBlockOptions">The options with which to configure this block.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.#ctor(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>
            Initializes the block with the specified options and a function which takes a cancellation token.
            </summary>
            <param name="function">The asynchronous function which generates items. If this function returns or throws an <see cref="T:System.OperationCanceledException"/>, then this block will complete. If this function throws another exception, then this block will fault. The first argument to this function ("send") is an asynchronous method to send an item to this block; the "send" method will throw <see cref="T:System.OperationCanceledException"/> if the block has completed and the function should exit. The second argument to this function is a cancellation token that will be cancelled if the block has completed and the function should exit.</param>
            <param name="dataflowBlockOptions">The options with which to configure this block. If the cancellation token is cancelled, then this block will cancel and then the next call to the function's "send" method will throw <see cref="T:System.OperationCanceledException"/>.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.#ctor(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes the block with a function which takes a cancellation token.
            </summary>
            <param name="function">The asynchronous function which generates items. If this function returns or throws an <see cref="T:System.OperationCanceledException"/>, then this block will complete. If this function throws another exception, then this block will fault. The first argument to this function ("send") is an asynchronous method to send an item to this block; the "send" method will throw <see cref="T:System.OperationCanceledException"/> if the block has completed and the function should exit. The second argument to this function is a cancellation token that will be cancelled if the block has completed and the function should exit.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.#ctor(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
            <summary>
            Initializes the block with the specified options and a function which does not take a cancellation token.
            </summary>
            <param name="function">The asynchronous function which generates items. If this function returns or throws an <see cref="T:System.OperationCanceledException"/>, then this block will complete. If this function throws another exception, then this block will fault. The argument to this function ("send") is an asynchronous method to send an item to this block; the "send" method will throw <see cref="T:System.OperationCanceledException"/> if the block has completed and the function should exit.</param>
            <param name="dataflowBlockOptions">The options with which to configure this block. If the cancellation token is cancelled, then this block will cancel and then the next call to the function's "send" method will throw <see cref="T:System.OperationCanceledException"/>.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.#ctor(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
            Initializes the block with a function which does not take a cancellation token.
            </summary>
            <param name="function">The asynchronous function which generates items. If this function returns or throws an <see cref="T:System.OperationCanceledException"/>, then this block will complete. If this function throws another exception, then this block will fault. The argument to this function ("send") is an asynchronous method to send an item to this block; the "send" method will throw <see cref="T:System.OperationCanceledException"/> if the block has completed and the function should exit.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.FunctionSendAsync(`0)">
            <summary>
            The method called by the function to send an item to the block.
            </summary>
            <param name="item">The item to send.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.PropagateResult(System.Threading.Tasks.Task)">
            <summary>
            The continuation applied to the function to interpret an exception as a fault and a success/cancel as a completion.
            </summary>
            <param name="function">The task representing the function.</param>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.TryReceive(System.Predicate{`0},`0@)">
            <summary>
            Attempts to synchronously receive an available output item from the block.
            </summary>
            <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter"/> may be <c>null</c>, in which case all items will pass.</param>
            <param name="item">The item received from the source.</param>
            <returns><c>true</c> if an item could be received; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
            <summary>
            Attempts to synchronously receive all available items from the block.
            </summary>
            <param name="items">The items received from the source.</param>
            <returns><c>true</c> if one or more items could be received; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <summary>
            Links the block to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1"/> to which to connect this source.</param>
            <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions"/> instance that configures the link.</param>
            <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.Complete">
            <summary>
            Signals to the block that it should not produce any more messages. This block will complete and then the next call to the function's "send" method will throw <see cref="T:System.OperationCanceledException"/>.
            </summary>
        </member>
        <member name="M:Nito.AsyncEx.FuncBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
            <summary>
            Signals to the block that it should enter a fault state and not produce any more messages. This block will fault and then the next call to the function's "send" method will throw <see cref="T:System.OperationCanceledException"/>.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.FuncBlock`1.Name">
            <summary>
            Gets the name for this block.
            </summary>
        </member>
        <member name="P:Nito.AsyncEx.FuncBlock`1.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation and completion of the dataflow block.
            </summary>
        </member>
    </members>
</doc>
